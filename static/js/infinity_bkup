
 */

//{#    debugger;#}
    var	map1,
        map2,
        bigButton = false,
        refreshIntervalId,
        refreshIntervalIdSite,
        deviceTypes = [],
        markers = [],
        circles = [],
	    lines = [],
        links = [],
        sites = [],
        links_data = [],
        devices_data = [],
        fromTime = {{fromTime}},
        toTime = {{ toTime }},
//{#        lastTime = {{ toTime }},#}
        popup = L.popup(),
        test = true,
        onSite = false,
        cap_limit = 2,
//{#        data = {{ data }},#}
        data_cap = {{ data.cap }},
        data_data = {{ data.data }},
        data_distance = {{ data.distance }},
        stream_cap = {{ stream.cap }},
        stream_data = {{ stream.data }},
        stream_distance = {{ stream.distance }},
        hist_cap = {{ histogram.avg_cap }},
        hist_freq = {{ histogram.records }},
        hist_distance = {{ histogram.distance }}
        path_cap = {{ path.cap }},
        path_lng = {{ path.lng }},
        path_lat = {{ path.lat }},
        path_time = {{ path.time }},
        path_dist = {{ path.dist }},
        path_cov = {{ path.cov }},
        site = '{{ site }}',
        link = '{{ link }}',
        deviceType = '{{ type }}',
        streamInterval = '{{ streamInterval }}',
        updateInterval = '{{ updateInterval }}';
        lastTime = (new Date).getTime();



//{#    var blackIcon = L.icon({#}
//{#        iconUrl: '/static/img/ships/ship-black.png',#}
//{#        iconSize:     [40, 40] // size of the icon#}
//{#    });#}
//{#    var orangeIcon = L.icon({#}
//{#        iconUrl: '/static/img/ships/ship-orange.png',#}
//{#        iconSize:     [40, 40] // size of the icon#}
//{#    });#}
//{#    var redIcon = L.icon({#}
//{#        iconUrl: '/static/img/ships/ship-red.png',#}
//{#        iconSize:     [40, 40] // size of the icon#}
//{#    });#}
//{#    var TYPICAL_COVERAGE_MILES = 20;#}
    function loadDevicesAndLinks() {
//{#        clearPlacemarks(); // Remove old placemarks#}
//{#        clearLines(); // Remove old placemarks#}

        var devices_url = '{{ devices_url }}';
        var links_url = '{{ links_url }}';
        var time = lastTime;
        $.post(devices_url, function(data) {
            if (data) {
                clearPlacemarks();
//{#                devices_data = [];#}
                var length = data.length;
                var noDevicePosition = true;
                for (var i=0; i<length; i++) {
//{#                    devices_data.push(data[i]);#}
                    var device = data[i];
                    var lat = device.lat;
                    var lng = device.lng;
                    time = device.time;
                    if (lat && lng) {
                        noDevicePosition = false;
                        addMarker(device, lat, lng);
                    }
                }
                aj = $.ajax({
                    type: "GET",
                    url: '{{ links_url }}',
                    async: true,
                    data: { time: time},
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"});
                aj.done(function (response, textStatus, jqXHR) {
//        {#                                    debugger;#}
                    if (response) {
                        clearLines(); // Remove old placemarks
//        {#                links_data =[];#}
                        var length = response.length;
                        var noDevicePosition = true;
                        for (var i=0; i<length; i++) {
                            var link = response[i];
//        {#                    links_data.push(data[i]);#}
                            var lat = link.lat;
                            var lng = link.lng;
//        {#                    var lat1 = device.lat1;#}
//        {#                    var lng1 = device.lng1;#}
                            if (lat && lng) {
                                noDevicePosition = false;
                                addLink(link);
                            }
                        }
                    }
//{#                                    stream.setTitle(null, { text: site });#}
                });
                aj.fail(function (jqXHR, textStatus, errorThrown) {
//{#                                    alert(textStatus);#}
                });
            }

        });
                            //debugger;


//{#        $.post(links_url, function(data) {#}
//{#            if (data) {#}
//{#                clearLines(); // Remove old placemarks#}
//{#                links_data =[];#}
//{#                var length = data.length;#}
//{#                var noDevicePosition = true;#}
//{#                for (var i=0; i<length; i++) {#}
//{#                    var link = data[i];#}
//{#                    links_data.push(data[i]);#}
//{#                    debugger;#}
//{#                    var lat = link.lat;#}
//{#                    var lng = link.lng;#}
//{#                    var lat1 = device.lat1;#}
//{#                    var lng1 = device.lng1;#}
//{#                    if (lat && lng) {#}
//{#                        noDevicePosition = false;#}
//{#                        addLink(link);#}
//{#                    }#}
//{#                }#}
//{#            }#}
//{#	    });#}
//{#        for (var i=0; i<links_data.length; i++) {#}
//{#            debugger;#}
//{#            addLink(links_data[i]);#}
//{#            var device = devices_data[i];#}
//{#            var lat = device.lat;#}
//{#            var lng = device.lng;#}
//{#            if (lat && lng) {#}
//{#                noDevicePosition = false;#}
//{#                addMarker(device, lat, lng);#}
//{#            }#}
//{#        }#}
    }
    function loadDevices() {
        clearPlacemarks(); // Remove old placemarks

	    var url = '{{ devices_url }}';
	    $.post(url, function(data) {
            if (data) {
                var length = data.length;
                var noDevicePosition = true;
                for (var i=0; i<length; i++) {
                    var device = data[i];
                    var lat = device.lat;
                    var lng = device.lng;
                    if (lat && lng) {
                        noDevicePosition = false;
                        addMarker(device, lat, lng);
                    }
                }
            }
	    });
    }

    function loadLinks() {
	    var url = '{{ links_url }}';
	    $.post(url, function(data) {
            if (data) {
                clearLines(); // Remove old placemarks
                var length = data.length;
//{#                var noDevicePosition = true;#}
                for (var i=0; i<length; i++) {
                    var link = data[i];
//{#                    debugger;#}
//{#                    var lat = link.lat;#}
//{#                    var lng = link.lng;#}
//{#                    var lat1 = device.lat1;#}
//{#                    var lng1 = device.lng1;#}
//{#                    if (lat && lng) {#}
//{#                        noDevicePosition = false;#}
                        addLink(link);
//{#                    }#}
                }
            }
	    });
    }

    function addMarker(device, lat, lng) {
//        {#	if (!map) return;#}
        //clearPlacemarks(); // Remove old placemarks
        var title = device.site;
//{#        deviceType = device.type;#}
//{#        if (device.coverage) {#}
            var d = new Date(device.time);
            title = title + '<br>' + device.type ;
            title = title + '<br> Tx: ' + device.tx + ' Mbps ';
            title = title + '<br> Rx: ' + device.rx + ' Mbps ';
//{#            title = title + '<br> Distance: ' + device.distance + " miles ";#}
            title = title + '<br> Capacity: ' + device.cap + " Mbps ";
            title = title + '<br> Traffic: ' + device.data + " Mbps ";
            title = title + '<br> Time: ' + d.toLocaleString();

//{#        }#}
//{#        else { // the device is not online#}
//{#            title = title + ' is offline';#}
//{##}
//{#        }#}
//        {#        debugger;#}
//        {#        var colors = {true: 'green', false: 'orange'};#}
        var color, circle, cap;
        cap = device.cap;
//{#        if (device.coverage) {#}
            if (cap > 500) {
                color = '#0ca35f';
            }
            else if (cap > 450) {
                color = '#3cb57e';
            }
            else if (cap > 400) {
                color = '#6dc79f';
            }
            else if (cap > 350) {
                color = '#9ddabf';
            }
            else if (cap > 300) {
                color = '#ceecdf';
            }
            else if (cap > 100) {
                color = '#d7efe5';
            }
//{#        } #}
            else {
//{#            if (device.distance < TYPICAL_COVERAGE_MILES) {#}
                color = 'red';
//{#            } else {#}
//{#                color = 'orange';#}
            }
//{#        }#}
        marker = L.circle([lat, lng], 5000, {
            color: color,
            fillColor: color,
            fillOpacity: 1.0
        });
        marker.addTo(map1);
//        {#        var marker;#}
//        {#        var coverage = device.coverage;#}
//        {##}
//        {#        if (test){#}
//        {#        if (coverage){#}
//        {#            marker = L.marker([lat, lng], {icon: blackIcon}).addTo(map1);#}
//        {#            test = false;#}
//        {#        }#}
//        {#        else {#}
//        {#            if (device.distance < TYPICAL_COVERAGE_MILES) {#}
//        {#                marker = L.marker([lat, lng], {icon: redIcon}).addTo(map1);#}
//        {#              test = true;#}
//        {#            } else {#}
//        {#                marker = L.marker([lat, lng], {icon: orangeIcon}).addTo(map1);#}
//        {#              test = true;#}
//        {#            }#}
//        {#        }#}
        marker.bindPopup(title);
        marker.on('click', onMarkerClick);
        markers.push(marker);
        deviceTypes.push(device.type);
        sites.push(device.site);
//{#        deviceType = device.type;#}
    }
    function addLink(link) {
//        {#	if (!map) return;#}
        //clearPlacemarks(); // Remove old placemarks
        var title = link.connId;

        if (link.cap > cap_limit) {
            var d = new Date(link.time);
            title = title + '<br> Tx: ' + link.tx + ' Mbps ';
            title = title + '<br> Rx: ' + link.rx + ' Mbps ';
            title = title + '<br> Distance: ' + link.distance + " miles ";
            title = title + '<br> Capacity: ' + link.cap + " Mbps ";
            title = title + '<br> Traffic: ' + link.data + " Mbps ";
            title = title + '<br> Time: ' + d.toLocaleString();

        }
        else { // the device is not online
            title = title + ' is offline';

        }
//{#        debugger;#}
//{#        var colors = {true: 'green', false: 'orange'};#}
        var color, circle,cap ;
        cap = link.cap;
        if (link.cap > cap_limit) {
            if (cap > 500) {
                color = '#0ca35f';
            }
            else if (cap > 450) {
                color = '#3cb57e';
            }
            else if (cap > 400) {
                color = '#6dc79f';
            }
            else if (cap > 350) {
                color = '#9ddabf';
            }
            else if (cap > 300) {
                color = '#ceecdf';
            }
            else {
                color = '#d7efe5';
            }
        } else {
            if (device.distance < TYPICAL_COVERAGE_MILES) {
                color = 'red';
            } else {
                color = 'orange';
            }
        }
//{#        debugger;#}
        var pointA = new L.LatLng(link.lat, link.lng);
        var pointB = new L.LatLng(link.lat1,link.lng1);
        var pointList = [pointA, pointB];

        var line = new L.Polyline(pointList, {
                                    color: color,
                                    weight: 5,
                                    opacity: 0.5,
                                    smoothFactor: 1
                                });
        line.addTo(map1);
        lines.push(line);
//{#        marker = L.circle([lat, lng], 10000, {#}
//{#                color: color,#}
//{#                fillColor: color,#}
//{#                fillOpacity: 1.0#}
//{#            });#}
//{#        marker.addTo(map1);#}
//{#        var marker;#}
//{#        var coverage = device.coverage;#}
//{##}
//{#        if (test){#}
//{#        if (coverage){#}
//{#            marker = L.marker([lat, lng], {icon: blackIcon}).addTo(map1);#}
//{#            test = false;#}
//{#        }#}
//{#        else {#}
//{#            if (device.distance < TYPICAL_COVERAGE_MILES) {#}
//{#                marker = L.marker([lat, lng], {icon: redIcon}).addTo(map1);#}
//                {#              test = true;#}
//{#            } else {#}
//{#                marker = L.marker([lat, lng], {icon: orangeIcon}).addTo(map1);#}
//                {#              test = true;#}
//{#            }#}
//{#        }#}
        line.bindPopup(title);
        line.on('click', onLinkClick);
//{#        markers.push(marker);#}
        links.push(link.connId);
    }
    function clearPlacemarks() {
        for (var i = 0; i < markers.length; i++) {
//{#            var marker = markers[i];#}
            map1.removeLayer(markers[i]);
        }
        markers = [];
        sites = [];
        deviceTypes = [];

    }

//    {#	len = lines.length;#}
//    {#	for (var i=0; i<len; i++) {#}
//    {#		var line = lines[i];#}
//    {#		line.setMap(null);#}
//    {#	}#}
//    {#	lines = [];#}

    function clearLines() {
        for (var i = 0; i < lines.length; i++) {
            map1.removeLayer(lines[i]);
        }
        lines = [];
        links = [];
    }

    function addCircle(lng, lat, cap, time, dist, cov) {
//        {#	if (!map) return;#}
        //clearPlacemarks(); // Remove old placemarks
        var color, circle,d ;
        if (cov) {
            if (cap > 500) {
                color = '#0ca35f';
            }
            else if (cap > 450) {
                color = '#3cb57e';
            }
            else if (cap > 400) {
                color = '#6dc79f';
            }
            else if (cap > 350) {
                color = '#9ddabf';
            }
            else if (cap > 300) {
                color = '#ceecdf';
            }
            else {
                color = '#d7efe5';
            }
        } else {
            if (dist < TYPICAL_COVERAGE_MILES) {
                color = 'red';
            } else {
                color = 'orange';
            }
        }
//{#        if (cap > 40) {#}
//{#                color = '#0ca35f'#}
//{#        }#}
//{#        else if (cap > 30) {#}
//{#            color = '#3cb57e'#}
//{#        }#}
//{#        else if (cap > 20) {#}
//{#            color = '#6dc79f'#}
//{#        }#}
//{#        else if (cap > 10) {#}
//{#            color = '#9ddabf'#}
//{#        }#}
//{#        else if (cap > 5) {#}
//{#            color = '#ceecdf'#}
//{#        }#}
//{#        else {#}
//{#            color = '#d7efe5'#}
//{#        }#}
        circle = L.circle([lat, lng], 250, {
                color: color,
                fillColor: color,
                fillOpacity: 0.5
            });
        circle.addTo(map2);
        d = new Date(time);
//{#        debugger;#}
        title = site;
        title = title + '<br> Lat: ' + lat ;
        title = title + '<br> Lng: ' + lng ;
        title = title + '<br> Distance: ' + dist + " miles ";
        title = title + '<br> Capacity: ' + cap + " Mbps ";
        title = title + '<br> Time: ' + d.toLocaleString();
        circle.bindPopup(title);
        circles.push(circle);
    }

    function addCircle_site(lng, lat, cap, time) {
//        {#	if (!map) return;#}
        //clearPlacemarks(); // Remove old placemarks
        var color, circle,d ;
//{#        if (cov) {#}
            if (cap > 40) {
                color = '#0ca35f';
            }
            else if (cap > 30) {
                color = '#3cb57e';
            }
            else if (cap > 20) {
                color = '#6dc79f';
            }
            else if (cap > 10) {
                color = '#9ddabf';
            }
            else if (cap > 5) {
                color = '#ceecdf';
            }
            else if (cap > 1){
                color = '#d7efe5';
//{#            }#}
            } else {
//{#            if (dist < TYPICAL_COVERAGE_MILES) {#}
                color = 'red';
{#            } else {#}
{#                color = 'orange';#}
{#            }#}
            }
{#        if (cap > 40) {#}
{#                color = '#0ca35f'#}
{#        }#}
{#        else if (cap > 30) {#}
{#            color = '#3cb57e'#}
{#        }#}
{#        else if (cap > 20) {#}
{#            color = '#6dc79f'#}
{#        }#}
{#        else if (cap > 10) {#}
{#            color = '#9ddabf'#}
{#        }#}
{#        else if (cap > 5) {#}
{#            color = '#ceecdf'#}
{#        }#}
{#        else {#}
{#            color = '#d7efe5'#}
{#        }#}
        circle = L.circle([lat, lng], 250, {
                color: color,
                fillColor: color,
                fillOpacity: 0.5
            });
        circle.addTo(map2);
        d = new Date(time);
{#        debugger;#}
        title = site;
        title = title + '<br> Lat: ' + lat ;
        title = title + '<br> Lng: ' + lng ;
{#        title = title + '<br> Distance: ' + dist + " miles ";#}
        title = title + '<br> Capacity: ' + cap + " Mbps ";
        title = title + '<br> Time: ' + d.toLocaleString();
        circle.bindPopup(title);
        circles.push(circle);
    }


    function clearCircles() {
        var len = circles.length;
        for (var i=0; i<len; i++) {
            var circle = circles[i];
            map2.removeLayer(circle);
        }
        circles = [];

    {#	len = lines.length;#}
    {#	for (var i=0; i<len; i++) {#}
    {#		var line = lines[i];#}
    {#		line.setMap(null);#}
    {#	}#}
    {#	lines = [];#}

    }

    function addConnectionLine(lat1, lng1, lat2, lng2, color) {
{#          var connectionCoordinates = [#}
{#                new google.maps.LatLng(lat1, long1),#}
{#                new google.maps.LatLng(lat2, long2) ];#}
{##}
{#          var connectionPath = new google.maps.Polyline({#}
{#                                     path: connectionCoordinates,#}
{#                                     strokeColor: '#009933',#}
{#                                     strokeOpacity: 0.9,#}
{#                                     strokeWeight: 3#}
{#                                   });#}
{##}
{#          connectionPath.setMap(map1);#}
        var pointA = new L.LatLng(lat1, lng1);
        var pointB = new L.LatLng(lat2, lng2);
        var pointList = [pointA, pointB];

        var firstpolyline = new L.Polyline(pointList, {
                                    color: color,
                                    weight: 3,
                                    opacity: 0.5,
                                    smoothFactor: 1
                                });
        firstpolyline.addTo(map);
        lines.push(firstpolyline);
    }
    function firstMap(){
        map1 = L.map('map1').setView([33.732124, -117.900595], 8);
        L.tileLayer('http://{s}.tiles.mapbox.com/v3/infinity.k4e0f93f/{z}/{x}/{y}.png', {maxZoom: 18}).addTo(map1);
        map1.attributionControl.setPrefix(false);
        // Disable drag and zoom handlers.
        map1.dragging.disable();
        map1.touchZoom.disable();
        map1.doubleClickZoom.disable();
        map1.scrollWheelZoom.disable();

        // Disable tap handler, if present.
        if (map1.tap) map1.tap.disable();
        loadDevicesAndLinks();
{#        loadDevices();#}
{#        loadLinks();#}
{#        map1.on('click', onMapClick1);#}
    }
    function secondMap(){

        map2 = L.map('map2').setView(medLatLng(path_lat, path_lng), 9);
        L.tileLayer('http://{s}.tiles.mapbox.com/v3/saswata.jldkb3nl/{z}/{x}/{y}.png', {maxZoom: 18}).addTo(map2);
        map2.attributionControl.setPrefix(false);
        map2.touchZoom.disable();
        map2.dragging.disable();
        if (map2.tap) map2.tap.disable();
        map2.doubleClickZoom.disable();
        map2.scrollWheelZoom.disable();
        clearCircles();
        for (i=0; i< path_cap.length; i+=1) {
            addCircle(path_lng[i], path_lat[i], path_cap[i], path_time[i], path_dist[i], path_cov[i])
        }
{#        map2.on('click', onMapClick2);#}
    }
    function medLatLng (path_lat, path_lng){
        var min_lat = Math.min.apply(null, path_lat),
            max_lat = Math.max.apply(null, path_lat),
            med_lat = (max_lat+min_lat)/ 2,
            min_lng = Math.min.apply(null, path_lng),
            max_lng = Math.max.apply(null, path_lng),
            med_lng = (max_lng+min_lng)/2;
        return [med_lat, med_lng];
    }
    function onMapClick1(e) {
        popup
            .setLatLng(e.latlng)
            .setContent("You clicked the map at " + e.latlng.toString())
            .openOn(map1);
        map1.panTo(e.latlng);
    }
    function onMapClick2(e) {
        popup
            .setLatLng(e.latlng)
            .setContent("You clicked the map at " + e.latlng.toString())
            .openOn(map2);
        map2.panTo(e.latlng);
    }
    function onMarkerClick(e) {
        map1.panTo(e.latlng);
{#        debugger;#}

        for (i = 0; i < markers.length; i++) {
            if (markers[i]._leaflet_id == this._leaflet_id) {
               site = sites[i];
               deviceType = deviceTypes[i];
            }
        }
        onSite = true;
        window.clearInterval(refreshIntervalIdSite);
        getDataMarker();
        lastPointDataMarker();
    }
    function onLinkClick(e) {
        map1.panTo(e.latlng);
{#    debugger;#}
        for (i = 0; i < lines.length; i++) {
            if (lines[i]._leaflet_id == this._leaflet_id) {
                site = links[i];
                deviceType = deviceTypes[i*2];
            }
        }
        onSite = false;
        window.clearInterval(refreshIntervalId);
        getData();
        lastPointData();

    }
    function lastPointDataMarker() {
        refreshIntervalIdSite = window.setInterval(function(){
            var stream = $('#stream').highcharts();
            aj = $.ajax({
                type: "GET",
                url: '{{ lastpoint_url_site }}',
                async: true,
                data: { site: site, lastTime: lastTime,type:deviceType},
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
            aj.done(function (response, textStatus, jqXHR) {
{#                                    debugger;#}
                var totalPoints = response.cap.length;
                if (totalPoints > 0) {
                    lastTime = response.cap[totalPoints - 1][0];
                }
{#                lastTime = (new Date).getTime();#}
{#                debugger;#}
{#                var length = stream.series[0].points.length;#}
                for (i = 0; i < totalPoints; i++) {

                    if ((stream.series[0].points.length) <80){
{#                                                stream.series[0].addPoint(response.data[i],false);#}
{#                    stream.series[1].addPoint(response.cap[i],false);#}
{#                        stream.series[2].addPoint(response.distance[i],true);#}
{##}
{#                    } else {#}
{#                if (response) {#}
                        stream.series[0].addPoint(response.data[0], false);
                        stream.series[1].addPoint(response.cap[0], false);
                        stream.series[2].addPoint(response.distance[0], true);
                    } else {
                        stream.series[0].addPoint(response.data[0], false, true);
                        stream.series[1].addPoint(response.cap[0], false, true);
                        stream.series[2].addPoint(response.distance[0], true, true);
                    }
                }
{#                                    stream.setTitle(null, { text: site });#}
            });
            aj.fail(function (jqXHR, textStatus, errorThrown) {
{#                                    alert(textStatus);#}
            });
        }, streamInterval);
        }
    function getDataMarker() {
{#        debugger;#}
        aj = $.ajax({
                type: "GET",
                url: '{{ stream_url_site }}',
                async: true,
                data: { site:site, type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj.done(function (response, textStatus, jqXHR) {
            var stream = $('#stream').highcharts();

                stream.series[0].setData(response.data, false);
                stream.series[1].setData(response.cap, false);

                stream.series[2].setData(response.distance,true);
                stream.setTitle(null, { text: site });

        });
        aj.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj = $.ajax({
                type: "GET",
                url: '{{ chart_url_site }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj.done(function (response, textStatus, jqXHR) {
{#                        debugger;#}
                var chart = $('#chart').highcharts();
{#                chart.series[0].setData(response.cap, true);#}
{#                chart.series[1].setData(response.distance, true);#}
{#                chart.series[2].setData(response.data, true);#}
{#                chart.setData(response,true);#}
                chart.series[0].setData(response.data,false);
                chart.series[1].setData(response.cap,false);
                chart.series[2].setData(response.distance, true);
{#                fromTime = response.cap[0][0];#}
{#                toTime = response.cap[]#}
                chart.setTitle(null, { text: site });

        });
        aj.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj1 = $.ajax({
                type: "GET",
                url: '{{ histogram_url_site }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj1.done(function (response, textStatus, jqXHR) {
{#            debugger;#}
{#                var hist = $('#histogram').highcharts();#}
{#                hist.xAxis[0].setCategories(response.avg_cap, true);#}
{#                hist.series[0].setData(response.avg_cap, true);#}
{#                hist.series[0].setData(response.records, true);#}
{#                hist.setTitle(null, { text: site });#}
                var hist = $('#histogram').highcharts();
                hist.xAxis[0].setCategories(response.distance, false);
                hist.series[0].setData(response.avg_cap, false);
                hist.series[1].setData(response.records, true);
                hist.setTitle(null, { text: site });


        });
        aj1.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj2 = $.ajax({
                type: "GET",
                url: '{{ path_url_site }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj2.done(function (response, textStatus, jqXHR) {
            if (response.lat.length > 0) {
                map2.panTo(medLatLng(response.lat, response.lng));
                clearCircles();
                for (i = 0; i < response.cap.length; i++) {
                    addCircle_site(response.lng[i], response.lat[i], response.cap[i], response.time[i])
                }
{#                clearOneLink();#}
{#                addOneLink();#}
            }
            else clearCircles();
        });
        aj2.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });
    }
    function lastPointData() {
        refreshIntervalId = window.setInterval(function(){
            var stream = $('#stream').highcharts();
            aj = $.ajax({
                type: "GET",
                url: '{{ lastpoint_url }}',
                async: true,
                data: { site: site, lastTime: lastTime,type:deviceType},
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
            aj.done(function (response, textStatus, jqXHR) {
{#                                    debugger;#}
                var totalPoints = response.cap.length;
{#                lastTime = (new Date).getTime();#}
                if (totalPoints > 0) {
                    lastTime = response.cap[totalPoints - 1][0];
                }
                for (i = 0; i < totalPoints; i++) {
                    if ((stream.series[0].points.length) <80){
{#                                                stream.series[0].addPoint(response.data[i],false);#}
{#                    stream.series[1].addPoint(response.cap[i],false);#}
{#                        stream.series[2].addPoint(response.distance[i],true);#}
{##}
{#                    } else {#}
{#                if (response) {#}
                        stream.series[0].addPoint(response.data[0], false);
                        stream.series[1].addPoint(response.cap[0], false);
                        stream.series[2].addPoint(response.distance[0], true);
                    } else {
                        stream.series[0].addPoint(response.data[0], false, true);
                        stream.series[1].addPoint(response.cap[0], false, true);
                        stream.series[2].addPoint(response.distance[0], true, true);
                    }
{#                if (response) {#}
{#                                    lastTime = response.cap[0][0];#}

{#                    stream.series[0].addPoint(response.data[0],true,true);#}
{#                    stream.series[1].addPoint(response.cap[0],true,true);#}
{#                    if (console.log(stream.series[2].data.length)<50){stream.series[2].addPoint(response.distance[i],true);} else {#}
{#                    stream.series[2].addPoint(response.distance[0],true,true);#}
                }
{#                                    stream.setTitle(null, { text: site });#}
            });
            aj.fail(function (jqXHR, textStatus, errorThrown) {
{#                                    alert(textStatus);#}
            });
        }, streamInterval);
        }
    function getData() {
{#        debugger;#}
        aj = $.ajax({
                type: "GET",
                url: '{{ stream_url }}',
                async: true,
                data: { site:site, type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj.done(function (response, textStatus, jqXHR) {
{#                        debugger;#}
                var stream = $('#stream').highcharts();

                stream.series[0].setData(response.data,false);
                stream.series[1].setData(response.cap, false);
                stream.series[2].setData(response.distance,true);
                stream.setTitle(null, { text: site });

        });
        aj.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);textStatus#}
        });

        aj = $.ajax({
                type: "GET",
                url: '{{ chart_url }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj.done(function (response, textStatus, jqXHR) {
{#                        debugger;#}
                var chart = $('#chart').highcharts();
{#                chart.series[0].setData(response.cap, true);#}
{#                chart.series[1].setData(response.distance, true);#}
{#                chart.series[2].setData(response.data, true);#}
{#                chart.setData(response,true);#}
                chart.series[0].setData(response.data,false);
                chart.series[1].setData(response.cap,false);
                chart.series[2].setData(response.distance,true);

{#                fromTime = response.cap[0][0];#}
{#                toTime = response.cap[]#}
                chart.setTitle(null, { text: site });
{#                        chart.tooltip.refresh(chart.series[0],chart.series[1],chart.series[2]);#}
{#            chart.redraw();#}
{#            chart.reflow();#}
{#            chart.tooltip.show();#}

        });
        aj.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj1 = $.ajax({
                type: "GET",
                url: '{{ histogram_url }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj1.done(function (response, textStatus, jqXHR) {
{#            debugger;#}
                var hist = $('#histogram').highcharts();
                hist.xAxis[0].setCategories(response.distance, false);
                hist.series[0].setData(response.avg_cap, false);
                hist.series[1].setData(response.records, true);
                hist.setTitle(null, { text: site });

        });
        aj1.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj2 = $.ajax({
                type: "GET",
                url: '{{ path_url }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime, type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj2.done(function (response, textStatus, jqXHR) {
            if (response.lat.length > 0) {
                map2.panTo(medLatLng(response.lat, response.lng));
                clearCircles();
                for (i = 0; i < response.cap.length; i++) {
                    addCircle(response.lng[i], response.lat[i], response.cap[i], response.time[i], response.dist[i],
                    response.cov[i])
                }
            }
            else clearCircles();
        });
        aj2.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });
    }

        $(window).on("blur focus", function(e) {
            var prevType = $(this).data("prevType");

            if (prevType != e.type) {   //  reduce double fire issues
                switch (e.type) {
                    case "blur":
                        // do work
                        break;
                    case "focus":
                            window.location.reload();
                        // do work
                        break;
                }
            }

            $(this).data("prevType", e.type);
        })
function getDataNoStream() {
{#        debugger;#}
{#        aj = $.ajax({#}
{#                type: "GET",#}
{#                url: '{{ stream_url }}',#}
{#                async: true,#}
{#                data: { site:site, type:deviceType },#}
{#                contentType: "application/json; charset=utf-8",#}
{#                dataType: "json"});#}
{#        aj.done(function (response, textStatus, jqXHR) {#}
{#                        debugger;#}
{#                var stream = $('#stream').highcharts();#}
{#                chart.series[0].setData(response.cap, true);#}
{#                chart.series[1].setData(response.distance, true);#}
{#                chart.series[2].setData(response.data, true);#}
{#                chart.setData(response,true);#}
{##}
{#                stream.series[0].setData(response.data,false);#}
{#                stream.series[1].setData(response.cap, false);#}
{#                stream.series[2].setData(response.distance,true);#}
{#                fromTime = response.cap[0][0];#}
{#                toTime = response.cap[]#}
{#                stream.setTitle(null, { text: site });#}
{##}
{#        });#}
{#        aj.fail(function (jqXHR, textStatus, errorThrown) {#}
{#            alert(textStatus);#}
{#        });#}

        aj = $.ajax({
                type: "GET",
                url: '{{ chart_url }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj.done(function (response, textStatus, jqXHR) {
{#                        debugger;#}
                var chart = $('#chart').highcharts();
{#                chart.series[0].setData(response.cap, true);#}
{#                chart.series[1].setData(response.distance, true);#}
{#                chart.series[2].setData(response.data, true);#}
{#                chart.setData(response,true);#}
                chart.series[0].setData(response.data,false);
                chart.series[1].setData(response.cap,false);
                chart.series[2].setData(response.distance,true);

{#                fromTime = response.cap[0][0];#}
{#                toTime = response.cap[]#}
                chart.setTitle(null, { text: site });
{#                        chart.tooltip.refresh(chart.series[0],chart.series[1],chart.series[2]);#}
{#            chart.redraw();#}
{#            chart.reflow();#}
{#            chart.tooltip.show();#}

        });
        aj.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj1 = $.ajax({
                type: "GET",
                url: '{{ histogram_url }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj1.done(function (response, textStatus, jqXHR) {
{#            debugger;#}
                var hist = $('#histogram').highcharts();
                hist.xAxis[0].setCategories(response.distance, false);
                hist.series[0].setData(response.avg_cap, false);
                hist.series[1].setData(response.records, true);
                hist.setTitle(null, { text: site });

        });
        aj1.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj2 = $.ajax({
                type: "GET",
                url: '{{ path_url }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime, type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj2.done(function (response, textStatus, jqXHR) {
            if (response.lat.length > 0) {
                map2.panTo(medLatLng(response.lat, response.lng));
                clearCircles();
                for (i = 0; i < response.cap.length; i++) {
                    addCircle(response.lng[i], response.lat[i], response.cap[i], response.time[i], response.dist[i],
                    response.cov[i])
                }
            }
            else clearCircles();
        });
        aj2.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });
    }
{#window.onerror = function (message, url, lineNo) {#}
{# alert('Error: ' + message +#}
{#       '\nUrl: ' + url +#}
{#       '\nLine Number: ' + lineNo);#}
{# return true;#}

   function getDataMarkerNoStream() {
{#        debugger;#}
{#        aj = $.ajax({#}
{#                type: "GET",#}
{#                url: '{{ stream_url_site }}',#}
{#                async: true,#}
{#                data: { site:site, type:deviceType },#}
{#                contentType: "application/json; charset=utf-8",#}
{#                dataType: "json"});#}
{#        aj.done(function (response, textStatus, jqXHR) {#}
{#                        debugger;#}
{#                var stream = $('#stream').highcharts();#}
{#            var stream = $('#stream').highcharts();#}
{#                chart.series[0].setData(response.cap, true);#}
{#                chart.series[1].setData(response.distance, true);#}
{#                chart.series[2].setData(response.data, true);#}
{#                chart.setData(response,true);#}
{##}
{#                stream.series[0].setData(response.data, false);#}
{#                stream.series[1].setData(response.cap, false);#}
{##}
{#                stream.series[2].setData(response.distance,true);#}
{#                fromTime = response.cap[0][0];#}
{#                toTime = response.cap[]#}
{#                stream.setTitle(null, { text: site });#}
{#            while(stream.series.length > 0)#}
{#                stream.series[2].remove(true);#}
{##}
{#        });#}
{#        aj.fail(function (jqXHR, textStatus, errorThrown) {#}
{#            alert(textStatus);#}
{#        });#}

        aj = $.ajax({
                type: "GET",
                url: '{{ chart_url_site }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj.done(function (response, textStatus, jqXHR) {
{#                        debugger;#}
                var chart = $('#chart').highcharts();
{#                chart.series[0].setData(response.cap, true);#}
{#                chart.series[1].setData(response.distance, true);#}
{#                chart.series[2].setData(response.data, true);#}
{#                chart.setData(response,true);#}
                chart.series[0].setData(response.data,false);
                chart.series[1].setData(response.cap,false);
                chart.series[2].setData(response.distance, true);
{#                fromTime = response.cap[0][0];#}
{#                toTime = response.cap[]#}
                chart.setTitle(null, { text: site });

        });
        aj.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj1 = $.ajax({
                type: "GET",
                url: '{{ histogram_url_site }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj1.done(function (response, textStatus, jqXHR) {
{#            debugger;#}
{#                var hist = $('#histogram').highcharts();#}
{#                hist.xAxis[0].setCategories(response.avg_cap, true);#}
{#                hist.series[0].setData(response.avg_cap, true);#}
{#                hist.series[0].setData(response.records, true);#}
{#                hist.setTitle(null, { text: site });#}
                var hist = $('#histogram').highcharts();
                hist.xAxis[0].setCategories(response.distance, false);
                hist.series[0].setData(response.avg_cap, false);
                hist.series[1].setData(response.records, true);
                hist.setTitle(null, { text: site });


        });
        aj1.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });

        aj2 = $.ajax({
                type: "GET",
                url: '{{ path_url_site }}',
                async: true,
                data: { site:site, fromTime:fromTime, toTime:toTime,type:deviceType },
                contentType: "application/json; charset=utf-8",
                dataType: "json"});
        aj2.done(function (response, textStatus, jqXHR) {
            if (response.lat.length > 0) {
                map2.panTo(medLatLng(response.lat, response.lng));
                clearCircles();
                for (i = 0; i < response.cap.length; i++) {
                    addCircle_site(response.lng[i], response.lat[i], response.cap[i], response.time[i])
                }
{#                clearOneLink();#}
{#                addOneLink();#}
            }
            else clearCircles();
        });
        aj2.fail(function (jqXHR, textStatus, errorThrown) {
{#            alert(textStatus);#}
        });
    }
    $('#datetimepicker1').datetimepicker({
              format:'unixtime',
              inline:true,
              scrollMonth:false,
              scrollTime:false,
              onChangeDateTime:function(dp,$input){
{#                  debugger;#}
                 tempTime = Number($input.val()*1000);
                 if (tempTime != toTime) {
                      fromTime = tempTime;
                 }
                }
            });
    $('#datetimepicker2').datetimepicker({
              format:'unixtime',
              inline:true,
              scrollMonth:false,
              scrollTime:false,
              onChangeDateTime:function(dp,$input){
                 tempTime = Number($input.val()*1000);
                 if (tempTime != fromTime) {
                      toTime = tempTime;
                 }
              }
            });
{#    $('#bigbutton').on('click', function () {#}
{#            if (onSite) {#}
{#                window.clearInterval(refreshIntervalIdSite);#}
{#                getDataMarker();#}
{#                lastPointDataMarker();#}
{#            } else {#}
{#                window.clearInterval(refreshIntervalId);#}
{#                getData();#}
{#                lastPointData();#}
{#            }#}
{#            bigButton = true;#}
{#        });#}
{#    function submitFunction() {#}
 $('#bigbutton').click(function () {
{#         debugger;#}
         if (onSite) {
                window.clearInterval(refreshIntervalIdSite);
                getDataMarkerNoStream();
{#                window.setTimeout(function (){lastPointDataMarker();}, 2000);#}
                lastPointDataMarker();
            } else {
                window.clearInterval(refreshIntervalId);
                getDataNoStream();
{#                window.setTimeout(function (){lastPointData(); }, 2000);#}
                lastPointData();
            }
{#            bigButton = true;#}
    });
{#    function getLastPoint() {#}
{#        debugger;#}
{#        aj = $.ajax({#}
{#            type: "GET",#}
{#            url: '{{ lastPoint_url }}',#}
{#            async: true,#}
{#            data: { site: site },#}
{#            contentType: "application/json; charset=utf-8",#}
{#            dataType: "json"});#}
{#        aj.done(function (response, textStatus, jqXHR) {#}
{#            debugger;#}
{#            var chart = $('#chart').highcharts();#}
{#            chart.series[0].addPoint(response.data);#}
{#            chart.series[1].addPoint(response.cap);#}
{#            chart.series[2].addPoint(response.distance);#}
{#        });#}
{#        aj.fail(function (jqXHR, textStatus, errorThrown) {#}
{#            alert(textStatus);#}
{#        });#}
{#    }#}
{#    function afterSetExtremes(e) {#}
{#        debugger;#}
{#        if (e.min) {#}
{#            fromTime = Math.ceil(e.min);#}
{#            toTime = Math.ceil(e.max);#}
{#            if (onSite) {#}
{#                getDataMarker();#}
{#            } else {#}
{#                getData();#}
{#            }#}
{#        }#}
{#    }#}
    $(function() {
        firstMap();
        secondMap();


{#        debugger;#}
        Highcharts.setOptions({
            global : {
                useUTC : false
            }
        });
{#        if (onSite) {#}
{#        var streamOptions_site = {#}
{##}
{#                chart: {#}
{#                    zoomType: 'x',#}
{#                    events : {#}
{#                        load : lastPointData_site()#}
{#                    }#}
{#                },#}
{#                title: {#}
{#                    text: 'Streaming Traffic, Capacity, Distance'#}
{#                },#}
{#                subtitle: {#}
{#                    text: site#}
{#                },#}
{##}
{##}
{#                rangeSelector : {#}
{#                    buttons: [{#}
{#                        count: 1,#}
{#                        type: 'minute',#}
{#                        text: '1M'#}
{#                    }, {#}
{#                        count: 5,#}
{#                        type: 'minute',#}
{#                        text: '5M'#}
{#                    }, {#}
{#                        type: 'all',#}
{#                        text: 'All'#}
{#                    }],#}
{#                    inputEnabled: false, // it supports only days#}
{#                    selected : 2 // all#}
{#                },#}
{#                xAxis: {#}
{#                    type: 'datetime',#}
{#                    minRange: 1000, // 1 s#}
{#                    tickInterval: 60000  // 1 min#}
{#                },#}
{#                yAxis: [#}
    {#                    { // Secondary yAxis#}
    {#                    gridLineWidth: 0,#}
    {#                    title: {#}
    {#                        text: 'Capacity',#}
    {#                        style: {#}
    {#                            color: Highcharts.getOptions().colors[1]#}
    {#                        }#}
    {#                    },#}
    {#                    labels: {#}
    {#                        format: '{value} Mbps',#}
    {#                        style: {#}
    {#                            color: Highcharts.getOptions().colors[1]#}
    {#                        }#}
    {#                    },#}
    {#                    opposite: true,#}
    {#                    floor:0#}
    {#                }, #}
{#                        { // Tertiary yAxis#}
{#                        gridLineWidth: 0,#}
{#                        title: {#}
{#                            text: 'Distance',#}
{#                            style: {#}
{#                                color: Highcharts.getOptions().colors[2]#}
{#                            }#}
{#                        },#}
{#                        labels: {#}
{#                            format: '{value} miles',#}
{#                            style: {#}
{#                                color: Highcharts.getOptions().colors[2]#}
{#                            }#}
{#                        },#}
{#                        opposite: false,#}
{#                        floor:0#}
{#                    },{ // Primary yAxis#}
{#                        labels: {#}
{#                            format: '{value}Mbps',#}
{#                            style: {#}
{#                                color: Highcharts.getOptions().colors[0]#}
{#                            }#}
{#                        },#}
{#                        title: {#}
{#                            text: 'Traffic, Capacity',#}
{#                            style: {#}
{#                                color: Highcharts.getOptions().colors[0]#}
{#                            }#}
{#                        },#}
{#                        opposite: true,#}
{#                        floor:0#}
{##}
{#                    }],#}
{#                tooltip: {#}
{#                    backgroundColor: 'white',#}
{#                    borderWidth: 0,#}
{#                    borderRadius: 0,#}
{#                    headerFormat: '{point.key} ',#}
{#                    pointFormat: ' | <span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b>',#}
{#                    positioner: function () {#}
{#                        var chart = $('#stream').highcharts();#}
{#                        return { x: chart.plotLeft, y: chart.plotTop };#}
{#                    },#}
{#                    shadow: false,#}
{#                    shared: true,#}
{#                    valueDecimals: 2,#}
{#                    formatter: function () {#}
{#                        var d = new XDSoft_datetime(this.x);#}
                        {#                    var s = '<b>' + new Date(this.x).toUTCString() + '</b>';#}
{#                        var s = '<b>' + d.toLocaleString() + '</b>';#}
{#                        var s = '<b>' + Highcharts.dateFormat('%A, %b %e, %Y, %H:%M:%S', this.x) + '</b>';#}
{#                        index=0;#}
{#                        $.each(this.points, function (index) {#}
{#                            if (index == 0) {#}
{#                                s += '<br/><span style="color:#6EA3ED; font-weight:bold;"> Traffic: ' + this.y + '  Mbps';#}
{#                            }#}
{#                            if (index == 1) {#}
{##}
{#                                s += '<br/><span style="color:#333338; font-weight:bold;"> Capacity: ' + this.y + '  Mbps';#}
{#                            }#}
{#                            if (index == 2) {#}
{#                                s += '<br/><span style="color:#88EF57; font-weight:bold;"> Distance: ' + this.y + '  miles';#}
{#                            }#}
{#                            if (index <1) {#}
{#                                index = +1;#}
{#                            } else { index = 0;#}
{##}
{#                            }#}
{##}
{#                        });#}
{#                        return s;#}
{#                    }#}
{##}
{#                },#}
{#                exporting: false,#}
{#                credits: false,#}
{#                legend: {#}
{#                    layout: 'vertical',#}
{#                    align: 'left',#}
{#                    x: 120,#}
{#                    verticalAlign: 'top',#}
{#                    y: 80,#}
{#                    floating: true,#}
{#                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'#}
{#                },#}
{#                series:[{#}
{#                    name: 'Traffic',#}
{#                    type: 'spline',#}
{#                    yAxis:1,#}
{#                    data: stream_data,#}
{#                    color: '#FF0000',#}
{#                    lineWidth: 4,#}
{#                    dashStyle: 'longdash',#}
{#                    dashStyle: 'shortdot',#}
{#                    color:'red',#}
{#                    tooltip: {#}
{#                        valueSuffix: ' Mbps'#}
{#                    }#}
{#                },#}
{#                    {#}
{#                    name: 'Capacity',#}
{#                    type: 'spline',#}
{#                    yAxis:1,#}
{#                    data: stream_cap,#}
{#                    tooltip: {#}
{#                        valueSuffix: ' Mbps'#}
{#                    }#}
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 3#}
{#                    },#}
{#                    shadow : true#}
{##}
{#                }, #}
{#                    {#}
{#                    name: 'Distance',#}
{#                    type: 'spline',#}
{#                    yAxis: 0,#}
{#                    data: stream_distance,#}
{#                    marker: {#}
{#                        enabled: false#}
{#                    },#}
{#                    lineWidth : 0,#}
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 2#}
{#                    },#}
{#                    tooltip: {#}
{#                        valueSuffix: ' miles'#}
{#                    }#}
{##}
{#                }]#}
{#            };#}
{#        var chartOptions_site = {#}
{#                chart: {#}
{#                    zoomType: 'x'#}
{#                },#}
{#                title: {#}
{#                    text: 'Traffic, Capacity, Distance'#}
{#                },#}
{#                subtitle: {#}
{#                    text: site#}
{#                },#}
{##}
{#                navigator : {#}
{#                    adaptToUpdatedData: false,#}
{#                    series : [{#}
{#                        data : data_data#}
{#                    },#}
{#                    {#}
{#                        data : data_cap#}
{#                    }#}
{#                        ,#}
{#                    {#}
{#                        data : data_distance#}
{#                    }#}
{#                    ]#}
{#                },#}
{#                scrollbar: {#}
{#                    liveRedraw: false#}
{#                },#}
{#                rangeSelector : {#}
{#                    buttons: [{#}
{#                        count: 1,#}
{#                        type: 'minute',#}
{#                        text: '1M'#}
{#                    }, {#}
{#                        count: 5,#}
{#                        type: 'minute',#}
{#                        text: '5M'#}
{#                    }, {#}
{#                        type: 'hour',#}
{#                        count: 1,#}
{#                        text: '1h'#}
{#                    }, {#}
{#                        type: 'day',#}
{#                        count: 1,#}
{#                        text: '1d'#}
{#                    }, {#}
{#                        type: 'all',#}
{#                        text: 'All'#}
{#                    }],#}
{#                    inputEnabled: false, // it supports only days#}
{#                    selected : 4 // all#}
{#                },#}
{#                xAxis: {#}
{#                    type: 'datetime',#}
{#                    minRange: 5000, // 1 s#}
{#                    tickInterval: 60000,  // 1 min#}
{#                    events: {#}
{#                        afterSetExtremes: afterSetExtremes#}
{#                    }#}
{#                },#}
{#                xAxis: [{#}
{#                    categories: chart_data_x#}
{#                }],#}
{#                yAxis: [#}
{#                    { // Secondary yAxis#}
{#                    gridLineWidth: 0,#}
{#                    title: {#}
{#                        text: 'Capacity',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[1]#}
{#                        }#}
{#                    },#}
{#                    labels: {#}
{#                        format: '{value} Mbps',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[1]#}
{#                        }#}
{#                    },#}
{#                    opposite: true,#}
{#                    floor:0#}
{#                }, #}
{#                    { // Tertiary yAxis#}
{#                    gridLineWidth: 0,#}
{#                    title: {#}
{#                        text: 'Distance',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[2]#}
{#                        }#}
{#                    },#}
{#                    labels: {#}
{#                        format: '{value} miles',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[2]#}
{#                        }#}
{#                    },#}
{#                    opposite: false,#}
{#                    floor:0#}
{#                },#}
{#                    { // Primary yAxis#}
{#                    labels: {#}
{#                        format: '{value}Mbps',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[0]#}
{#                        }#}
{#                    },#}
{#                    title: {#}
{#                        text: 'Traffic, Capacity',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[0]#}
{#                        }#}
{#                    },#}
{#                    opposite: true,#}
{#                    floor:0#}
{##}
{#                }],#}
{#                tooltip: {#}
{#                    backgroundColor: 'white',#}
{#                    borderWidth: 0,#}
{#                    borderRadius: 0,#}
{#                    headerFormat: '{point.key} ',#}
{#                    pointFormat: ' | <span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b>',#}
{#                    positioner: function () {#}
{#                        var chart = $('#chart').highcharts();#}
{#                        return { x: chart.plotLeft, y: chart.plotTop };#}
{#                    },#}
{#                    shadow: false,#}
{#                    shared: true,#}
{#                    valueDecimals: 2,#}
{#                    formatter: function () {#}
{#                        var d = new XDSoft_datetime(this.x);#}
                        {#                    var s = '<b>' + new Date(this.x).toUTCString() + '</b>';#}
{#                        var s = '<b>' + d.toLocaleString() + '</b>';#}
{#                        var s = '<b>' + Highcharts.dateFormat('%A, %b %e, %Y, %H:%M:%S', this.x) + '</b>';#}
{#                        index=0;#}
{#                        $.each(this.points, function (index) {#}
{#                            if (index == 0) {#}
{#                                s += '<br/><span style="color:#6EA3ED; font-weight:bold;"> Traffic: ' + this.y + '  Mbps';#}
{#                            }#}
{#                            if (index == 1) {#}
{##}
{#                                s += '<br/><span style="color:#333338; font-weight:bold;"> Capacity: ' + this.y + '  Mbps';#}
{#                            }#}
{#                            if (index == 2) {#}
{#                                s += '<br/><span style="color:#88EF57; font-weight:bold;"> Distance: ' + this.y + '  miles';#}
{#                            }#}
{#                            if (index <1) {#}
{#                                index = +1;#}
{#                            } else { index = 0;#}
{##}
{#                            }#}
{##}
{#                        });#}
{#                        return s;#}
{#                    }#}
{#                },#}
{#                exporting: false,#}
{#                credits: false,#}
{#                legend: {#}
{#                    layout: 'vertical',#}
{#                    align: 'left',#}
{#                    x: 120,#}
{#                    verticalAlign: 'top',#}
{#                    y: 80,#}
{#                    floating: true,#}
{#                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'#}
{#                },#}
{#                series:[{#}
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
{#                    name: 'Traffic',#}
{#                    type: 'spline',#}
{#                    yAxis:1,#}
{#                    data: data_data,#}
{#                    dashStyle: 'shortdot',#}
{#                    color:'red',#}
{#                    tooltip: {#}
{#                        valueSuffix: ' Mbps'#}
{#                    }#}
{#                },#}
{#                    {#}
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
{#                    name: 'Capacity',#}
{#                    type: 'spline',#}
{#                    yAxis:1,#}
{#                    data: data_cap,#}
{#                    tooltip: {#}
{#                        valueSuffix: ' Mbps'#}
{#                    }#}
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 3#}
{#                    },#}
{#                    shadow : true#}
{##}
{#                }, #}
{#                    {#}
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
{#                    name: 'Distance',#}
{#                    type: 'spline',#}
{#                    yAxis: 0,#}
{#                    data: data_distance,#}
{#                    marker: {#}
{#                        enabled: false#}
{#                    },#}
{#                    lineWidth : 0,#}
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 2#}
{#                    },#}
{#                    tooltip: {#}
{#                        valueSuffix: ' miles'#}
{#                    }#}
{##}
{#                }]#}
{#            };#}
{#        var histOptions_site = {#}
{#                chart: {#}
{#                    renderTo:'histogram',#}
{#                    zoomType: 'x'#}
{#                },#}
{#                title: {#}
{#                    text: 'Capacity Frequency'#}
{#                },#}
{#                subtitle: {#}
{#                    text: site#}
{#                },#}
{#                navigator: {#}
{#                    enabled: false#}
{#                },#}
{#                rangeSelector : {#}
{#                    enabled: false#}
{#                },#}
{#                xAxis: [{#}
{#                    categories: hist_cap#}
{#                    },{#}
{#                    title: {#}
{#                        text: 'Capacity',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[3]#}
{#                        }#}
{#                    }#}
{#                }],#}
{#                yAxis: [{ // Primary yAxis#}
{##}
{#                    title: {#}
{#                        text: 'Capacity',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[0]#}
{#                        }#}
{#                    },#}
{#                    labels: {#}
{#                        format: '{value} Mbps',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[0]#}
{#                        }#}
{#                    },#}
{#                    opposite: true#}
{##}
{#                }, { // Secondary yAxis#}
{#                    gridLineWidth: 0,#}
{#                    title: {#}
{#                        text: 'Frequency',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[1]#}
{#                        }#}
{#                    },#}
{#                    labels: {#}
{#                        format: '{value} %',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[1]#}
{#                        }#}
{#                    }#}
{##}
{#                }],#}
{#                tooltip: {#}
{#                    shared: true#}
{#                },#}
{#                exporting: false,#}
{#                credits: false,#}
{#                legend: {#}
{#                    layout: 'vertical',#}
{#                    align: 'left',#}
{#                    x: 120,#}
{#                    verticalAlign: 'top',#}
{#                    y: 80,#}
{#                    floating: true,#}
{#                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'#}
{#                },#}
{#                series: [#}
{#                    {#}
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
{#                    name: 'Capacity',#}
{#                    type: 'column',#}
{#                    yAxis: 0,#}
{#                    data: hist_cap,#}
{#                    tooltip: {#}
{#                        valueSuffix: ' Mbps'#}
{#                    }#}
{##}
{#                }, #}
{#                    {#}
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
{#                    name: 'Frequency',#}
{#                    type: 'column',#}
{#                    yAxis: 1,#}
{#                    data: hist_freq,#}
{#                    marker: {#}
{#                        enabled: false#}
{#                    },#}
{#                    tooltip: {#}
{#                        valueSuffix: ' %'#}
{#                    }#}
{##}
{#                }]#}
{#            };#}
{#            $('#stream').highcharts('StockChart', streamOptions_site);#}
{#            $('#chart').highcharts('StockChart', chartOptions_site);#}
{#            $('#histogram').highcharts(histOptions_site);#}
{#        } else {#}
        var streamOptions = {

                chart: {
                 //   zoomType: 'x',
                    events : {
                        load : function () { if (onSite) {lastPointDataMarker();}else{lastPointData();} }
                    }
                },
                title: {
                    text: 'Streaming Traffic, Capacity, Distance'
                },
                subtitle: {
                    text: site
                },


{#                rangeSelector : {#}
{#                    buttons: [{#}
{#                        count: 1,#}
{#                        type: 'minute',#}
{#                        text: '1M'#}
{#                    }, {#}
{#                        count: 5,#}
{#                        type: 'minute',#}
{#                        text: '5M'#}
{#                    }, {#}
{#                        type: 'all',#}
{#                        text: 'All'#}
{#                    }],#}
{#                    inputEnabled: false, // it supports only days#}
{#                    selected : 2 // all#}
{#                },#}
                xAxis: {
                    type: 'datetime',
                    minRange: 1000, // 15 s
                    tickInterval: 10000  // 10s
                },
                yAxis: [
    {#                    { // Secondary yAxis#}
    {#                    gridLineWidth: 0,#}
    {#                    title: {#}
    {#                        text: 'Capacity',#}
    {#                        style: {#}
    {#                            color: Highcharts.getOptions().colors[1]#}
    {#                        }#}
    {#                    },#}
    {#                    labels: {#}
    {#                        format: '{value} Mbps',#}
    {#                        style: {#}
    {#                            color: Highcharts.getOptions().colors[1]#}
    {#                        }#}
    {#                    },#}
    {#                    opposite: true,#}
    {#                    floor:0#}
    {#                }, #}
                        { // Tertiary yAxis
                        gridLineWidth: 0,
                        title: {
                            text: 'Distance',
                            style: {
                                color: Highcharts.getOptions().colors[2]
                            }
                        },
                        labels: {
                            format: '{value} miles',
                            style: {
                                color: Highcharts.getOptions().colors[2]
                            }
                        },
                        opposite: false,
                        floor:0
                    },{ // Primary yAxis
                        labels: {
                            format: '{value}Mbps',
                            style: {
                                color: Highcharts.getOptions().colors[0]
                            }
                        },
                        title: {
                            text: 'Traffic, Capacity',
                            style: {
                                color: Highcharts.getOptions().colors[0]
                            }
                        },
                        opposite: true,
                        floor:0

                    }],
                tooltip: {
{#                    backgroundColor: 'white',#}
{#                    borderWidth: 0,#}
{#                    borderRadius: 0,#}
{#                    headerFormat: '{point.key} ',#}
{#                    pointFormat: ' | <span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b>',#}
{#                    positioner: function () {#}
{#                        var chart = $('#stream').highcharts();#}
{#                        return { x: chart.plotLeft, y: chart.plotTop };#}
{#                    },#}
{#                    shadow: false,#}
                    shared: true,
                    valueDecimals: 2,
{#                    followTouchMove:true,#}
{#                    followPointer:true,#}
                    formatter: function () {
{#                        var d = new XDSoft_datetime(this.x);#}
                        {#                    var s = '<b>' + new Date(this.x).toUTCString() + '</b>';#}
{#                        var s = '<b>' + d.toLocaleString() + '</b>';#}
                        var s = '<b>' + Highcharts.dateFormat('%A, %b %e, %Y, %H:%M:%S', this.x) + '</b>';
                        index=0;
                        $.each(this.points, function (index) {
                            if (index == 0) {
                                s += '<br/><span style="color:#6EA3ED; font-weight:bold;"> Traffic: ' + this.y + '  Mbps';
                            }
                            if (index == 1) {

                                s += '<br/><span style="color:#333338; font-weight:bold;"> Capacity: ' + this.y + '  Mbps';
                            }
                            if (index == 2) {
                                s += '<br/><span style="color:#88EF57; font-weight:bold;"> Distance: ' + this.y + '  miles';
                            }
                            if (index <2) {
                                index = +1;
                            } else { index = 0;

                            }

                        });
                        return s;
                    }

                },
                exporting: false,
                credits: false,
                legend: {
                    layout: 'vertical',
                    align: 'left',
                    x: 120,
                    verticalAlign: 'top',
                    y: 80,
                    floating: true,
                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
                },
                series:[{
                    name: 'Traffic',
                    type: 'spline',
                    yAxis:1,
                    data: stream_data,
{#                    color: '#FF0000',#}
{#                    lineWidth: 4,#}
{#                    dashStyle: 'longdash',#}
                    dashStyle: 'shortdot',
{#                    color:'red',#}
                    tooltip: {
                        valueSuffix: ' Mbps'
                    }
                },
                    {
                    name: 'Capacity',
                    type: 'spline',
                    yAxis:1,
                    data: stream_cap,
                    tooltip: {
                        valueSuffix: ' Mbps'
                    }
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 3#}
{#                    },#}
{#                    shadow : true#}

                }, {
                    name: 'Distance',
                    type: 'spline',
                    yAxis: 0,
                    data: stream_distance,
                    marker: {
                        enabled: false
                    },
{#                    lineWidth : 0,#}
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 2#}
{#                    },#}
                    tooltip: {
                        valueSuffix: ' miles'
                    }

                }]
            };
        var chartOptions = {
             //   chart: {
               //     zoomType: 'x'
             //   },
                title: {
                    text: 'Traffic, Capacity, Distance'
                },
                subtitle: {
                    text: site
                },
{#                navigator: {#}
{#                    enabled: false#}
{#                },#}
{#                rangeSelector : {#}
{#                    enabled: false#}
{#                },#}
{#                navigator : {#}
{#                    adaptToUpdatedData: true,#}
{#                    series : [{#}
{#                        data : data_data#}
{#                    },#}
{#                    {#}
{#                        data : data_cap#}
{#                    },#}
{#                    {#}
{#                        data : data_distance#}
{#                    }]#}
{#                },#}
{#                scrollbar: {#}
{#                    liveRedraw: false#}
{#                },#}
{#                rangeSelector : {#}
{#                    buttons: [{#}
{#                        count: 1,#}
{#                        type: 'minute',#}
{#                        text: '1M'#}
{#                    }, {#}
{#                        count: 5,#}
{#                        type: 'minute',#}
{#                        text: '5M'#}
{#                    }, {#}
{#                        type: 'hour',#}
{#                        count: 1,#}
{#                        text: '1h'#}
{#                    }, {#}
{#                        type: 'day',#}
{#                        count: 1,#}
{#                        text: '1d'#}
{#                    }, {#}
{#                        type: 'all',#}
{#                        text: 'All'#}
{#                    }],#}
{#                    inputEnabled: false, // it supports only days#}
{#                    selected : 4 // all#}
{#                },#}
                xAxis: {
                    type: 'datetime',
                    minRange: 60000, // 1 min
                    tickInterval: 120000  // 2 min
              //     events: {
              //          afterSetExtremes: afterSetExtremes
              //      }
                },
{#                xAxis: [{#}
{#                    categories: chart_data_x#}
{#                }],#}
                yAxis: [
{#                    { // Secondary yAxis#}
{#                    gridLineWidth: 0,#}
{#                    title: {#}
{#                        text: 'Capacity',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[1]#}
{#                        }#}
{#                    },#}
{#                    labels: {#}
{#                        format: '{value} Mbps',#}
{#                        style: {#}
{#                            color: Highcharts.getOptions().colors[1]#}
{#                        }#}
{#                    },#}
{#                    opposite: true,#}
{#                    floor:0#}
{#                }, #}
                    { // Tertiary yAxis
                    gridLineWidth: 0,
                    title: {
                        text: 'Distance',
                        style: {
                            color: Highcharts.getOptions().colors[2]
                        }
                    },
                    labels: {
                        format: '{value} miles',
                        style: {
                            color: Highcharts.getOptions().colors[2]
                        }
                    },
                    opposite: false,
                    floor:0
                },{ // Primary yAxis
                    labels: {
                        format: '{value}Mbps',
                        style: {
                            color: Highcharts.getOptions().colors[0]
                        }
                    },
                    title: {
                        text: 'Traffic, Capacity',
                        style: {
                            color: Highcharts.getOptions().colors[0]
                        }
                    },
                    opposite: true,
                    floor:0

                }],
                tooltip: {
{#                    followPointer: false,  // this is already the default, it's just to stress what's said in commit comments and make code "speak"#}
{#        followTouchMove: true,  // this is already the default, it's just to stress what's said in commit comments and make code "speak"#}
{#                    backgroundColor: 'white',#}
{#                    borderWidth: 0,#}
{#                    borderRadius: 0,#}
{#                    headerFormat: '{point.key} ',#}
{#                    pointFormat: ' | <span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b>',#}
{#                    positioner: function () {#}
{#                        var chart = $('#chart').highcharts();#}
{#                        return { x: chart.plotLeft, y: chart.plotTop };#}
{#                    },#}
{#                    shadow: false,#}
                    shared: true,
                    valueDecimals: 2,
                    formatter: function () {
{#                        var d = new XDSoft_datetime(this.x);#}
{#                                            var s = '<b>' + new Date(this.x).toUTCString() + '</b>';#}
{#                        var s = '<b>' + d.toLocaleString() + '</b>';#}
                        var s = '<b>' + Highcharts.dateFormat('%A, %b %e, %Y, %H:%M:%S', this.x) + '</b>';
                        index=0;
                        $.each(this.points, function (index) {
                            if (index == 0) {
                                s += '<br/><span style="color:#6EA3ED; font-weight:bold;"> Traffic: ' + this.y + '  Mbps';
                            }
                            if (index == 1) {
                                s += '<br/><span style="color:#333338; font-weight:bold;"> Capacity: ' + this.y + '  Mbps';
                            }
                            if (index == 2) {
                                s += '<br/><span style="color:#88EF57; font-weight:bold;"> Distance: ' + this.y + '  miles';
                            }
                            if (index <2) {
                                index = +1;
                            } else { index = 0;
                            }
                        });
                        return s;
                    }

                },
                exporting: false,
                credits: false,
                legend: {
                    layout: 'vertical',
                    align: 'left',
                    x: 120,
                    verticalAlign: 'top',
                    y: 80,
                    floating: true,
                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
                },
                series:[{
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
                    name: 'Traffic',
                    type: 'spline',
                    yAxis:1,
                    data: data_data,
                    dashStyle: 'shortdot',
{#                    color:'red',#}
                    tooltip: {
                        valueSuffix: ' Mbps'
                    }
                },
                    {
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
                    name: 'Capacity',
                    type: 'spline',
                    yAxis:1,
                    data: data_cap,
                    tooltip: {
                        valueSuffix: ' Mbps'
                    }
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 3#}
{#                    },#}
{#                    shadow : true#}

                },
                    {
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
                    name: 'Distance',
                    type: 'spline',
                    yAxis: 0,
                    data: data_distance,
                    marker: {
                        enabled: false
                    },
{#                    lineWidth : 0,#}
{#                    marker : {#}
{#                        enabled : true,#}
{#                        radius : 2#}
{#                    },#}
                    tooltip: {
                        valueSuffix: ' miles'
                    }

                }]
            };
        var histOptions = {
{#                chart: {#}
{#                    renderTo:'histogram',#}
{#                    zoomType: 'x'#}
{#                },#}
                title: {
                    text: 'Capacity vs Distance'
                },
                subtitle: {
                    text: site
                },
                navigator: {
                    enabled: false
                },
                rangeSelector : {
                    enabled: false
                },
                xAxis: [{
                    categories: hist_distance
                    },{
                    title: {
                        text: 'Distance',
                        style: {
                            color: Highcharts.getOptions().colors[3]
                        }
                    }
                }],
                yAxis: [{ // Primary yAxis

                    title: {
                        text: 'Capacity',
                        style: {
                            color: Highcharts.getOptions().colors[0]
                        }
                    },
                    labels: {
                        format: '{value} Mbps',
                        style: {
                            color: Highcharts.getOptions().colors[0]
                        }
                    },
                    opposite: true

                }, { // Secondary yAxis
                    gridLineWidth: 0,
                    title: {
                        text: 'Frequency',
                        style: {
                            color: Highcharts.getOptions().colors[1]
                        }
                    },
                    labels: {
                        format: '{value} %',
                        style: {
                            color: Highcharts.getOptions().colors[1]
                        }
                    }

                }],
                tooltip: {
                    shared: true,
                    valueDecimals: 2,
                    formatter: function () {
                        var s = '<span style="color:#88EF57; font-weight:bold;"> Distance: ' + this.x + '  miles';
                        index=0;
                        $.each(this.points, function (index) {
                            if (index == 0) {
                                s += '<br/><span style="color:#6EA3ED; font-weight:bold;"> Traffic: ' + this.y + '  Mbps';
                            }
                            if (index == 1) {
                                s += '<br/><span style="color:#333338; font-weight:bold;"> Capacity: ' + this.y + '  Mbps';
                            }
{#                            if (index == 2) {#}
{#                                s += '<br/><span style="color:#88EF57; font-weight:bold;"> Distance: ' + this.y + '  miles';#}
{#                            }#}
                            if (index <1) {
                                index = +1;
                            } else { index = 0;
                            }
                        });
                        return s;
                    }

                },
                exporting: false,
                credits: false,
                legend: {
                    layout: 'vertical',
                    align: 'left',
                    x: 120,
                    verticalAlign: 'top',
                    y: 80,
                    floating: true,
                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
                },
                series: [
                    {
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
                    name: 'Capacity',
                    type: 'column',
                    yAxis: 0,
                    data: hist_cap,
{#                    tooltip: {#}
{#                        valueSuffix: ' Mbps'#}
{#                    }#}

                }, {
{#                    pointInterval: 1000,#}
{#                    pointStart: fromTime,#}
                    name: 'Frequency',
                    type: 'column',
                    yAxis: 1,
                    data: hist_freq,
                    marker: {
                        enabled: false
                    },
{#                    tooltip: {#}
{#                        valueSuffix: ' %'#}
{#                    }#}

                }]
            };
        $('#stream').highcharts(streamOptions);
        $('#chart').highcharts(chartOptions);
        $('#histogram').highcharts(histOptions);
{#        }#}



        //setInterval();
    //});

/**
 * Load new data depending on the selected min and max
 */
//{#    function afterSetExtremes(e) {#}
//{#        debugger;#}
//{#        if (e.min) {#}
//{#            fromTime = Math.ceil(e.min);#}
//{#            toTime = Math.ceil(e.max);#}
//{#            getData();#}
//{#        }#}
//{#    }#}
//{#        $('a[href*=#]:not([href=#])').click(function() {#}
//{#            if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {#}
//{#              var target = $(this.hash);#}
//{#              target = target.length ? target : $('[name=' + this.hash.slice(1) +']');#}
//{#              if (target.length) {#}
//{#                $('html,body').animate({ #}
//{#                  scrollTop: target.offset().top#}
//{#                }, 1000);#}
//{#                return false;#}
//{#              }#}
//{#            }#}
//{#        });#}
//{#        $('#path').highcharts(heatOptions);#}
        window.setInterval(function() {
              loadDevicesAndLinks();
//{#            loadDevices();#}
//{#            loadLinks();#}
//{#            debugger;#}
//{#            if (bigButton == false){#}
//{#                nowTime = new Date().getTime();#}
//{#                toTime = Math.round( nowTime );#}
//{#                fromTime = Math.round(nowTime - 30*60000);#}
//{#                if (onSite) {#}
//{#                    getDataMarker();#}
//{#                } else {#}
//{#                    getData();#}
//{#                }#}
//{#            };#}
            }, updateInterval);
//{#        window.location.reload();#}

    });